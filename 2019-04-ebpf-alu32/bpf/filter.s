
bpf/filter.o:	file format ELF64-BPF

Disassembly of section .text:
sub64_ir:
       0:	w3 = 1
       1:	w4 = w2
       2:	r4 <<= 32
       3:	r4 >>= 32
       4:	w5 = w1
       5:	r5 <<= 32
       6:	r5 >>= 32
       7:	if r4 > r5 goto +1 <LBB3_2>
       8:	w3 = 0

LBB3_2:
       9:	r4 = r2
      10:	r4 >>= 32
      11:	r0 = r1
      12:	r0 >>= 32
      13:	w0 -= w4
      14:	w0 -= w3
      15:	w1 -= w2
      16:	r0 <<= 32
      17:	r0 |= r1
      18:	exit
Disassembly of section socket1:
filter1:
       0:	w1 = 0
       1:	*(u32 *)(r10 - 16) = r1
       2:	r2 = r10
       3:	r2 += -16
       4:	r1 = 0 ll
       6:	call 1
       7:	r7 = 0
       8:	r6 = 0
       9:	if r0 == 0 goto +1 <LBB0_2>
      10:	r6 = *(u64 *)(r0 + 0)

LBB0_2:
      11:	w1 = 1
      12:	*(u32 *)(r10 - 16) = r1
      13:	r2 = r10
      14:	r2 += -16
      15:	r1 = 0 ll
      17:	call 1
      18:	if r0 == 0 goto +1 <LBB0_4>
      19:	r7 = *(u64 *)(r0 + 0)

LBB0_4:
      20:	r6 -= r7
      21:	*(u64 *)(r10 - 16) = r6
      22:	w1 = 2
      23:	*(u32 *)(r10 - 4) = r1
      24:	r2 = r10
      25:	r2 += -4
      26:	r3 = r10
      27:	r3 += -16
      28:	r1 = 0 ll
      30:	r4 = 0
      31:	call 2
      32:	w0 = 1
      33:	exit
Disassembly of section socket2:
filter2:
       0:	w1 = 0
       1:	*(u32 *)(r10 - 16) = r1
       2:	r2 = r10
       3:	r2 += -16
       4:	r1 = 0 ll
       6:	call 1
       7:	r7 = 0
       8:	r6 = 0
       9:	if r0 == 0 goto +1 <LBB1_2>
      10:	r6 = *(u64 *)(r0 + 0)

LBB1_2:
      11:	w1 = 1
      12:	*(u32 *)(r10 - 16) = r1
      13:	r2 = r10
      14:	r2 += -16
      15:	r1 = 0 ll
      17:	call 1
      18:	if r0 == 0 goto +1 <LBB1_4>
      19:	r7 = *(u64 *)(r0 + 0)

LBB1_4:
      20:	w2 = w7
      21:	r2 <<= 32
      22:	r2 >>= 32
      23:	w3 = w6
      24:	r3 <<= 32
      25:	r3 >>= 32
      26:	w1 = 1
      27:	if r2 > r3 goto +1 <LBB1_6>
      28:	w1 = 0

LBB1_6:
      29:	r2 = r7
      30:	r2 >>= 32
      31:	r3 = r6
      32:	r3 >>= 32
      33:	r3 -= r2
      34:	w2 = 2
      35:	*(u32 *)(r10 - 4) = r2
      36:	r3 -= r1
      37:	r6 -= r7
      38:	r3 <<= 32
      39:	r6 <<= 32
      40:	r6 >>= 32
      41:	r3 |= r6
      42:	*(u64 *)(r10 - 16) = r3
      43:	r2 = r10
      44:	r2 += -4
      45:	r3 = r10
      46:	r3 += -16
      47:	r1 = 0 ll
      49:	r4 = 0
      50:	call 2
      51:	w0 = 1
      52:	exit
Disassembly of section socket3:
filter3:
       0:	w1 = 0
       1:	*(u32 *)(r10 - 16) = r1
       2:	r2 = r10
       3:	r2 += -16
       4:	r1 = 0 ll
       6:	call 1
       7:	r7 = 0
       8:	r6 = 0
       9:	if r0 == 0 goto +1 <LBB2_2>
      10:	r6 = *(u64 *)(r0 + 0)

LBB2_2:
      11:	w1 = 1
      12:	*(u32 *)(r10 - 16) = r1
      13:	r2 = r10
      14:	r2 += -16
      15:	r1 = 0 ll
      17:	call 1
      18:	if r0 == 0 goto +1 <LBB2_4>
      19:	r7 = *(u64 *)(r0 + 0)

LBB2_4:
      20:	r2 = r7
      21:	r2 >>= 32
      22:	r1 = r6
      23:	r1 >>= 32
      24:	w1 -= w2
      25:	w3 = w7
      26:	r3 <<= 32
      27:	r3 >>= 32
      28:	w4 = w6
      29:	r4 <<= 32
      30:	r4 >>= 32
      31:	w2 = 1
      32:	if r3 > r4 goto +1 <LBB2_6>
      33:	w2 = 0

LBB2_6:
      34:	w1 -= w2
      35:	w2 = 2
      36:	*(u32 *)(r10 - 4) = r2
      37:	w6 -= w7
      38:	r1 <<= 32
      39:	r1 |= r6
      40:	*(u64 *)(r10 - 16) = r1
      41:	r2 = r10
      42:	r2 += -4
      43:	r3 = r10
      44:	r3 += -16
      45:	r1 = 0 ll
      47:	r4 = 0
      48:	call 2
      49:	w0 = 1
      50:	exit
